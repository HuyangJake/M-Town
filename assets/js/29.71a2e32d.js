(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{351:function(e,t,n){"use strict";n.r(t);var i=n(0),o=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"swizzling-with-block-injection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#swizzling-with-block-injection"}},[e._v("#")]),e._v(" Swizzling with block injection")]),e._v(" "),n("p",[e._v("要在"),n("code",[e._v("lldb")]),e._v("中使用Objective-C的runtime，可以通过导入头文件来获得运行时的各种黑色科技。")]),e._v(" "),n("pre",[n("code",[e._v("po @import Foundation\n")])]),e._v(" "),n("p",[e._v("在控制台输入"),n("code",[e._v("po")])]),e._v(" "),n("pre",[n("code",[e._v("（lldb) po \nEnter expressions, then terminate with an empty line to evaluate:\n\t1:\n")])]),e._v(" "),n("p",[e._v("然后可输入多行代码，就像在Xcode中写代码一样。在编写完毕后，回车空一行，再回车代码就会被执行了。下面是一个例子：")]),e._v(" "),n("pre",[n("code",[e._v('1: @import Cocoa; \n2: id $class = [NSObject class]; \n3: SEL $sel = @selector(init); \n4: void *$method = (void *)class_getInstanceMethod($class , $sel); \n5: IMP $oldImp = (IMP)method_getImplementation($method); \n\nid (^$block)(id) = ^id(id object) { \n\tif ((BOOL)[object isKindOfClass:[NSView class]]) {\n\t\t fprintf(stderr, "%s\\n", (char *)[[[object class] description] UTF8String]); \n\t} \n\treturn object;\n}\nIMP $newImp = (IMP)imp_implementationWithBlock($block);\nmethod_setImplementation($method, $newImp);\n')])]),e._v(" "),n("p",[e._v("至此，NSObject的init方法就被替换为了上述代码中的block，"),n("code",[e._v("LLDB")]),e._v("中有一个bug，在block中执行IMPS就会崩溃。")]),e._v(" "),n("p",[e._v("内容来自："),n("strong",[e._v("《Advanced Apple Debugging & Reverse Engineering》")])])])}),[],!1,null,null,null);t.default=o.exports}}]);