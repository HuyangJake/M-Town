(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{357:function(s,t,a){"use strict";a.r(t);var e=a(0),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-什么是isa指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是isa指针"}},[s._v("#")]),s._v(" 1. 什么是isa指针")]),s._v(" "),a("p",[s._v("首先来看一下，NSObject的定义（不含方法定义）：")]),s._v(" "),a("div",{staticClass:"language-objectivec line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("@interface")]),s._v(" NSObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("NSObject"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     Class    isa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("在Objective-C中，@interface关键字可以看着是C语言中的struct关键字的别名，当然他还会有一些其它功能，比如说让编译器知道@interface后后面的是一个Objective-C的类的名字等。但就我们研究其内存布局来说，我们简单地将其替换为struct，并将protocal定义去掉。因此，NSObject的定义就是样：")]),s._v(" "),a("div",{staticClass:"language-objectivec line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" NSObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n 　　Class isa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("那个这个Class又是什么呢？在objc.h中我们发现其仅仅是一个结构(struct)指针的typedef定义:\n")]),s._v(" "),a("pre",[a("code",[s._v(" typedefstruct objc_class *Class;\n")])]),s._v(" "),a("p",[s._v("因此，NSObject的定义就像这个样子：")]),s._v(" "),a("div",{staticClass:"language-objectivec line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" NSObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n 　　objc_class "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("isa\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("isa就是“is a”，对于所有继承了NSObject的类其对象也都有一个isa指针。这个isa指针指向的东西(先这样称呼它吧)就是关于这个对象所属的类的定义。")]),s._v(" "),a("p",[s._v("每一个Objective-C对象的底层都是这样的一个C结构体：")]),s._v(" "),a("div",{staticClass:"language-objectivec line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" objc_class "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" objc_class "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" isa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  …"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" objc_method_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("methodLists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*方法链表*/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这个结构体中的第一个成员变量，就是isa指针。")]),s._v(" "),a("h2",{attrs:{id:"_2-isa指针的指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-isa指针的指向"}},[s._v("#")]),s._v(" 2. isa指针的指向")]),s._v(" "),a("p",[s._v("实例对象的isa指针指向是其所属的类对象，这个类对象包含了该实例对象的一些信息（例如：实例列表、方法列表等）。isa指针的类型是还是一个结构体 "),a("code",[s._v("objc_class")]),s._v(" 其实也就是指向地址的类对象的结构，接下来看下 该"),a("code",[s._v("objc_class")]),s._v("的具体结构：")]),s._v(" "),a("div",{staticClass:"language-objectivec line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" objc_class "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n     Class isa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n       \n     Class super_class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n       \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n       \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n       \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" instance_size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" objc_ivar_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ivars"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" objc_method_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("methodLists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   \n       \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" objc_cache "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" objc_protocol_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("protocols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     \n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("一个objc_class对象包括一个类的：父类定义(super_class), 变量列表，方法列表，还有实现了哪些协议(Protocal)")]),s._v(" "),a("p",[s._v("这个结构中还有一个isa指针，它在这里（类对象中）指向的是元类对象("),a("code",[s._v("metaclass object")]),s._v(")。在Objective-C中任何的类定义都是对象。即在程序启动的时候任何类定义都对应于一块内存。在编译的时候，编译器会给每一个类生成一个且只生成一个”描述其定义的对象”,也就是水果公司说的类对象(class object),他是一个单例(singleton), 而我们在C++等语言中所谓的对象，叫做实例对象(instance object)。对于实例对象我们不难理解，但类对象(class object)是干什么吃的呢？我们知道Objective-C是门很动态的语言，因此程序里的所有实例对象(instace objec)都是在运行时由Objective-C的运行时库生成的，而这个类对象(class object)就是运行时库用来创建实例对象(instance object)的依据。")]),s._v(" "),a("p",[a("strong",[s._v("任何直接或间接继承了NSObject的类，它的实例对象(instacne objec)中都有一个isa指针，指向它的类对象(class object)。这个类对象(class object)中存储了关于这个实例对象(instace object)所属的类的定义的一切：包括变量，方法，遵守的协议等等。")])]),s._v(" "),a("p",[s._v("_ 这个实例对象(instance object)的isa指针指向的类对象(class object)里面还有一个isa呢？_")]),s._v(" "),a("p",[s._v("这个类对象(class objec)的isa指向的依然是一个objc-class，它就是“元类对象”(metaclass object)，它和类对象(class object)的关系是这样的:  类对象(class object)中包含了类的实例变量，实例方法的定义，而元类对象(metaclass object)中包括了类的类方法(也就是C++中的静态方法)的定义。类对象和元类对象中水果公司当然还会包含一些其它的东西，以后也可能添加其它的内容，但对于我们了解其内存布局来说，只需要记住：类对象存的是关于实例对象的信息(变量，实例方法等)，而元类对象(metaclass object)中存储的是关于类的信息(类的版本，名字，类方法等)。要注意的是，类对象(class object)和元类对象(metaclass object)的定义都是objc_class结构，其不同仅仅是在用途上，比如其中的方法列表在类对象(instance object)中保存的是实例方法(instance method)，而在元类对象(metaclass object)中则保存的是类方法(class method)。")]),s._v(" "),a("h2",{attrs:{id:"_3-图例说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-图例说明"}},[s._v("#")]),s._v(" 3. 图例说明")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.my.csdn.net/uploads/201210/21/1350831500_2327.jpg",alt:""}}),s._v("\n图中可以看出，D3继承D2,D2继承D1,D1最终继承NSObject。下图从D3的一个对象开始，排列出D3 D2 D1 NSObject 类对象，元类对象等关系。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.my.csdn.net/uploads/201210/21/1350831599_3230.png",alt:""}}),s._v("\n图中的箭头都是指针的指向。")]),s._v(" "),a("p",[s._v("参考：")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://www.cnblogs.com/csutanyu/archive/2011/12/12/Objective-C_memory_layout.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Objective-C内存布局"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://developer.apple.com/reference/objectivec/1657527-objective_c_runtime?language=objc",target:"_blank",rel:"noopener noreferrer"}},[s._v("Objective-C Runtime"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);